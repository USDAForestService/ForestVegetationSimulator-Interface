//start keyword.dbs.ATRTLiDB

f1:{listButtonString Build the FVS_ATRTList table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
ATRTLiDB  !1,10!!2,10!}

//end keyword.dbs.ATRTLiDB

//start keyword.dbs.BurnReDB

f1:{listButtonString Build FVS_BurnReport table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
BurnReDB  !1,10!}

//end keyword.dbs.BurnReDB

//start keyword.dbs.CalbStDB

f1:
{noInput Build the FVS_CalbStat table.}

//end keyword.dbs.CalbStDB

//start keyword.dbs.CarbReDB

f1:{listButtonString Build the 2 carbon tables.}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

description:{
The two carbon tables, FVS_Carbon and FVS_Hrv_Carbon,
store the same data as the stand carbon and 
harvested products carbon reports.}

parmsForm:{
CarbReDB  !1,10!}

//end keyword.dbs.CarbReDB

//start keyword.dbs.ClimReDB

f1:
{noInput Build the FVS_Climate table.}

//end keyword.dbs.ClimReDB

//start keyword.dbs.ComputDB

description:
{Controls the way the FVS_Compute table is built.

NOTE: EXCEL spreadsheets cannot be altered to add new
variables to existing tables. Therefore, the value of the
first field has no effect when using EXCEL.}

f1title:{Build FVS_Compute table.}
f1:{listButtonString Add new variables to existing table:}
f1v:{0 = Yes \n 1 = No}

f2:{listButtonString Include variables starting with underscore:}
f2v:{0 = No \n 1 = Yes}

parmsForm:{
ComputDB   !1,10!!2,10!}

//end keyword.dbs.ComputDB

//start keyword.dbs.CutLiDB

f1:{listButtonString Build the FVS_CutList table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
CutLiDB   !1,10!!2,10!}

//end keyword.dbs.CutList

//start keyword.dbs.SQLIn

f1:{scheduleBox}
f2:{noInput Press "Use Editor"}

description:
{Run an query on the DSNIn connection. If the query is a SELECT,
and the column names are the same as user-defined Compute variables
then the values of those variables will be set to those in the database.}

parmsForm:
{SQLIn     !1,10!
SELECT *
FROM
WHERE Stand_ID = %StandID% and Year = %Year%
EndSQL}

parmsForm=answerForm

//end keyword.dbs.SQLIn

//start keyword.dbs.DSNOut

f1title:{Enter the database file name, or the DSN,}
f1:{fileBrowse Username, and Password for the output connection}
f1v:{FVSOut.xls}

description:
{Specifies the data base file name or the Data Source Name (DSN),
Username, and Password for the output database connection.}

answerForm:{DSNOut\n!1!}
parmsForm=answerForm

//end keyword.dbs.DSNOut

//start keyword.dbs.DSNIn

f1title:{Enter the database file name, or the DSN,}
f1:{fileBrowse Username, and Password for the input connection}
f1v:{FVSIn.mdb}

description:
{Specifies the data base file name or the Data Source Name (DSN),
Username, and Password for the input database connection.}

answerForm:{DSNIn\n!1!}
parmsForm=answerForm

//end keyword.dbs.DSNIn

//start keyword.dbs.DWDCvDB

f1:{listButtonString Build FVS_Down_Wood_Cov table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
DWDCvDB  !1,10!}

//end keyword.dbs.DWDCvDB

//start keyword.dbs.DWDVlDB

f1:{listButtonString Build FVS_Down_Wood_Vol table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
DWDVlDB  !1,10!}

//end keyword.dbs.DWDVlDB

//start keyword.dbs.FuelReDB

f1:{listButtonString Build FVS_Consumption table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
FuelReDB  !1,10!}

//end keyword.dbs.FuelReDB

//start keyword.dbs.FuelsOut

f1:{listButtonString Build FVS_Fuels table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
FuelsOut  !1,10!}

//end keyword.dbs.FuelsOut

//start keyword.dbs.MisRpts

f1:{listButtonString Build the 3 mistletoe tables}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

description:{
The three dwarf FVS_DM_Spp_Sum, FVS_DM_Stnd_Sum  and FVS_DM_Sz_Sum tables store 
the same data as the Species-Specific, Stand Average and Diameter Class reports 
of the FVS Interim Dwarf Mistletoe Model. If the FVS_DM_Sz_Sum report is
desired, the Mistletoe Model's MISTPRT keyword must also be selected.
}

parmsForm:{
MisRpts   !1,10!}

//end keyword.dbs.MisRpts

//start keyword.dbs.MortReDB

f1:{listButtonString Build FVS_Mortality table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
MortReDB  !1,10!!2,10!}

//end keyword.dbs.MortReDB

//start keyword.dbs.PotFirDB

f1:{listButtonString Build FVS_PotFire table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
PotFirDB   !1,10!}

//end keyword.dbs.PotFirDB

//start keyword.dbs.SnagOuDB

f1:{listButtonString Build FVS_SnagDet table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
SnagOuDB   !1,10!!2,10!}

//end keyword.dbs.SnagOuDB

//start keyword.dbs.SnagSuDB

f1:{listButtonString Build FVS_SnagSum table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
SnagSuDB   !1,10!}

//end keyword.dbs.SnagSuDB

//start keyword.dbs.StandSQL

f1:{noInput Press "Use Editor"}

description:
{Specify an SQL statement that from which stand-level
FVS variables are initialized.}

parmsForm:
{StandSQL
SELECT *
FROM FVS_StandInit
WHERE Stand_ID = '%StandID%'
EndSQL}

//end keyword.dbs.StandSQL

//start keyword.dbs.SQLOut

f1:{scheduleBox}
f2:{noInput Press "Use Editor"}

description:
{Run an query on the DSNOut connection. If the query is a SELECT,
and the column names are the same as user-defined Compute variables
then the values of those variables will be set to those in the database.}

parmsForm:
{SQLOut    !1,10!
SELECT *
FROM
WHERE Stand_ID = %StandID% and Year = %Year%
EndSQL}

//end keyword.dbs.SQLOut

//start keyword.dbs.StrClsDB

f1:{listButtonString Build FVS_StrClass table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

parmsForm:{
StrClsDB  !1,10!}

//end keyword.dbs.StrClsDB

//start keyword.dbs.Summary

f1:{listButtonString Build FVS_Summary or FVS_Summary2 table}
f1v:{1 = Build FVS_Summary table.
>2 = Build FVS_Summary2 table.}

description:
{FVS_Summary2 contains the same information as FVS_Summary but with removals 
reported on separate lines.}

parmsForm:{
Summary  !1,10!}

//end keyword.dbs.Summary

//start keyword.dbs.TreeLiDB

f1:{listButtonString Build the FVS_Treelist table}
f1v:{1 = Both database and standard output.
>2 = Database table only.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
TreeLiDB  !1,10!!2,10!}

//end keyword.dbs.TreeLiDB

//start keyword.dbs.TreeSQL

f1:{noInput Press "Use Editor"}
description:
{Specify an SQL statement that from which tree-level
FVS variables are initialized.}

parmsForm:
{TreeSQL
SELECT *
FROM FVS_TreeInit
WHERE Stand_id = '%StandID%'
EndSQL}

//end keyword.dbs.TreeSQL

//start keyword.dbs.EconRpts

f1:{listButtonString Build DBS FVS_EconReport table(s)}
f1v:{1 = Econ summary DBS output only.
>2 = Econ DBS summary and harvest volume/value outputs.}

f2:{listButtonString Species Codes Output}
f2v:{0 = Default (based on input data)
1 = FVS Alpha Codes
2 = FIA Codes
3 = USDA Plants Symbols}

parmsForm:{
EconRpts   !1,10!!2,10!}

//end keyword.dbs.EconRpts

//start keyword.dbs.RDBBMort

f1:
{noInput Build the FVS_RD_Beetle table.}

description:
{Writes the Western Root Disease model bark beetle mortality report
to the output database. WRD model keyword BBOut must also be used.}

//end keyword.dbs.RDBBMort

//start keyword.dbs.RDDetail

f1:
{noInput Build the FVS_RD_Det table.}

description:
{Writes the Western Root Disease model detailed root disease table
to the output database. WRD model keyword RRDOut must also be used.}

//end keyword.dbs.RDDetail

//start keyword.dbs.RDSum

f1:
{noInput Build the FVS_RD_Sum table.}

description:
{Writes the Western Root Disease model summary disease table to the
output database. Table is written to main output file by default.}

//end keyword.dbs.RDSum

//start keyword.dbs.InvStats

f1:
{noInput Build the FVS_Stats_Stand and FVS_Stats_Species tables.}

//end keyword.dbs.InvStats

//start keyword.dbs.RegRepts

f1:
{noInput Build the regeneration establishment tables.}

//end keyword.dbs.RegRepts

//start keyword.dbs.VBCSUMDB

f1:
{noInput Build the FVS_FIAVBC_Summary table.}

//end keyword.dbs.VBCSUMDB

//start keyword.dbs.VBCTRLDB

f1:
{noInput Build the FVS_FIAVBC_TreeList table.}

//end keyword.dbs.VBCTRLDB

//start keyword.dbs.VBCCUTDB

f1:
{noInput Build the FVS_FIAVBC_CutList table.}

//end keyword.dbs.VBCCUTDB

//start keyword.dbs.VBCATRDB

f1:
{noInput Build the FVS_FIAVBC_AtrtList table.}

//end keyword.dbs.VBCATRDB
